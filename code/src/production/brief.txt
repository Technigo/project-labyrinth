Project Labyrinth
(https://www.notion.so/Project-Labyrinth-5e425db3042e4526a2955abd33d3e4f4)

> This week's project is all about tying together the skills you've learnt to build an app which retrieves a list of actions from the backend and presents them to the user as interactable items.


This week's project comes in the form of a text-based adventure. Classic games like this usually present the user with a description of where they are and provide several alternatives about what they can do.

Example:

```css
You find yourself in a room with one door leading East and a small 
opening in the wall leading South.

- Go East
- Go South
```

Based on the choice (Go East or Go South), the state of the game (where the player is) will update. Then, a new description and set of actions can be displayed to the player.

You will receive a **response** with a new **description** and the next set of **actions** to show to the player.  

---
### Description and Actions UI

How you present the description and the actions is completely up to you.  Maybe you want to sort the directions (East, North, West, South) or put them in some graphical order.  Perhaps you would like to add interactable compass.

### Request response time

This project's backend is designed so that there is some delay until the request returns from the server.  Using thunks is a good way of making sure that the user doesn't do another action until the response is received from the server.

If you notice that your request takes some time, this is intentional

---
## Requirements ðŸ§ª
- Publish your site on Netlify.

**ðŸ”µ Blue Level (Minimum Requirements)**
- Your page should be responsive.

**ðŸ”´ Red Level (Intermediary Goals)**
- Use redux to store a history of what the player has done
- If you want to focus more on design and make or use a design library (for example [material-ui](https://material-ui.com/))

**âš« Black Level (Advanced Goals)**

- Style each room/state based on the description.  For instance, if it contains the word "forest" you may want to change the background to a forest
- Display a history of all the actions a player has taken
- Persist redux store to localStorage, so the app data remains when you reload the page
- Create a visual representation (drawing) of the map/labyrinth that the player is navigating.  It could update after each action.  The coordinates might be helpful here, or you can track the directions yourself
